{"version":3,"sources":["./src/app/@theme/model/image-snippet.ts","./src/app/pages/list-movies/components/all-categories/all-categories.component.ts","./src/app/pages/list-movies/components/all-categories/all-categories.component.html","./src/app/pages/list-movies/components/all-movies/all-movies.component.ts","./src/app/pages/list-movies/components/all-movies/all-movies.component.html","./src/app/pages/list-movies/components/category-movies/category-movies.component.ts","./src/app/pages/list-movies/components/category-movies/category-movies.component.html","./src/app/pages/list-movies/components/edit-movie/edit-movie.component.ts","./src/app/pages/list-movies/components/edit-movie/edit-movie.component.html","./src/app/pages/list-movies/components/new-movie/new-movie.component.ts","./src/app/pages/list-movies/components/new-movie/new-movie.component.html","./src/app/pages/list-movies/list-movies.component.ts","./src/app/pages/list-movies/list-movies.component.html","./src/app/pages/list-movies/movies-routing.module.ts","./src/app/pages/list-movies/movies.module.ts","./src/app/pages/list-movies/services/movies.service.ts","./src/app/pages/list-movies/store/movies.actions.ts","./src/app/pages/list-movies/store/movies.effects.ts","./src/app/pages/list-movies/store/movies.reducer.ts","./src/app/pages/list-movies/store/movies.selector.ts"],"names":[],"mappings":"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","file":"list-movies-movies-module-es2015.js","sourcesContent":["export class ImageSnippet {\r\n    constructor(public src: string, public file: File) {}\r\n}","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport * as movieActions from '../../store/movies.actions';\nimport * as moviesSelector from '../../store/movies.selector';\nimport { MoviesState } from '../../store/movies.reducer';\nimport { ListMovies } from '../../model/list-movies.model';\n\n\n@Component({\n  selector: 'app-all-categories',\n  templateUrl: './all-categories.component.html',\n  styleUrls: ['./all-categories.component.scss']\n})\nexport class AllCategoriesComponent implements OnInit {\n  categories$: Observable<ListMovies[]>;\n  isDeleted: boolean;\n\n  constructor(private store: Store<MoviesState>) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(movieActions.loadCategories());\n    this.getAllCategories();\n  }\n\n  getAllCategories() {\n    this.categories$ = this.store.select(moviesSelector.getListCategoiresSelector);\n  }\n\n}\n","<div class=\"w-100 mb-4\" *ngIf=\"(categories$| async) as categories\">\r\n  <div class=\"container\">\r\n    <h1 class=\"text-center my-4\">Categories</h1>\r\n    <!--Start Latest Section-->\r\n    <div class=\"latest mt-5\">\r\n      <div class=\"row\">\r\n\r\n        <div class=\"col-12 col-sm-6 col-md-4 col-lg-3\" *ngFor=\"let category of categories\">\r\n          <div class=\"card w-100 mb-4\" style=\"width: 18rem;\">\r\n            <a routerLink=\"/categories/{{category.id}}\">\r\n              <div class=\"card-body\">\r\n                <h5 class=\"card-title text-primary\">{{category.name}}</h5>\r\n                <span class=\"card-subtitle mb-2 text-muted\">{{(category.created_at | date: 'yyyy-MM-dd')}}</span>\r\n              </div>\r\n            </a>\r\n          </div>\r\n        </div><!--.col-12-->\r\n\r\n      </div><!--.row-->\r\n    </div><!--.latest-->\r\n  </div><!--.container-->\r\n</div>\r\n<div *ngIf=\"!(categories$ | async)\">\r\n  <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n</div>\r\n\r\n\r\n<app-footer></app-footer>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { interval, Observable, Subject, Subscription } from 'rxjs';\nimport * as movieActions from '../../store/movies.actions';\nimport * as moviesSelector from '../../store/movies.selector';\nimport { MoviesState } from '../../store/movies.reducer';\nimport { ListMovies } from '../../model/list-movies.model';\nimport { AdminConfig } from 'src/app/pages/AdminConfig';\n\n\n@Component({\n  selector: 'app-all-movies',\n  templateUrl: './all-movies.component.html',\n  styleUrls: ['./all-movies.component.scss']\n})\nexport class AllMoviesComponent implements OnInit {\n  movies$: Observable<ListMovies[]>;\n  baseUrl = AdminConfig.sourceAPI;\n  isDeleted: boolean;\n\n  constructor(private store: Store<MoviesState>) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(movieActions.loadMovies());\n    this.getAllMovies();\n  }\n\n  getAllMovies() {\n    this.movies$ = this.store.select(moviesSelector.getListMoviesSelector);\n  }\n\n  delete(movieId: number) {\n    if (confirm('Are you sure you want to delete this Movie ?')) {\n      this.store.dispatch(movieActions.deleteMovie({id: movieId}));\n    }\n  }\n\n}\n","<div *ngIf=\"(movies$ | async) as movies\">\r\n  <!-- <div *ngIf=\"regionsList.length !== 0\"> -->\r\n  <!-- <div class=\"container-fluid\"> -->\r\n  <h1 class=\"text-center details-title my-4\">Manage Movies Page</h1>\r\n\r\n  <div class=\"table-responsive text-center\">\r\n    <table class=\"table table-bordered main-table\">\r\n      <tr class=\"bg-dark text-white\">\r\n        <td>Image</td>\r\n        <td>Name</td>\r\n        <td>Description</td>\r\n<!--        <td>{{'phone-number' | translate}}</td>-->\r\n        <td>Created At</td>\r\n        <td>Control</td>\r\n      </tr>\r\n      <tr *ngFor=\"let movie of movies\">\r\n        <td><img src=\"{{baseUrl + movie?.image}}\" alt=\"{{movie?.name}} Image\" class=\"img-thumbnail img-custom\"></td>\r\n        <td>{{movie?.name ? movie?.name : '-'}}</td>\r\n        <td>{{movie?.description ? movie?.description : '-'}}</td>\r\n<!--        <td>{{admin?.phoneNumber ? admin?.phoneNumber : '-'}}</td>-->\r\n        <td>{{ movie.created_at ? (movie.created_at | date: 'yyyy-MM-dd') : '-'}}</td>\r\n        <td>\r\n          <a class=\"btn btn-success btn-sm mr-1 mb-1\" routerLink=\"/edit/{{movie.id}}\">\r\n            Edit\r\n          </a>\r\n          <a (click)=\"delete(movie?.id)\" class=\"btn btn-danger confirm btn-sm mr-1 mb-1 {{isDeleted ? 'disabled' : ''}}\">\r\n            Delete\r\n          </a>\r\n        </td>\r\n      </tr>\r\n    </table>\r\n  </div>\r\n</div>\r\n<div *ngIf=\"!(movies$ | async)\">\r\n  <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n</div>\r\n\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport * as movieActions from '../../store/movies.actions';\nimport * as moviesSelector from '../../store/movies.selector';\nimport { MoviesState } from '../../store/movies.reducer';\nimport { ListMovies } from '../../model/list-movies.model';\nimport { AdminConfig } from 'src/app/pages/AdminConfig';\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\n\n\n@Component({\n  selector: 'app-category-movies',\n  templateUrl: './category-movies.component.html',\n  styleUrls: ['./category-movies.component.scss']\n})\nexport class CategoryMoviesComponent implements OnInit {\n  movies$: Observable<ListMovies[]>;\n  categoryId: number;\n  baseUrl = AdminConfig.sourceAPI;\n  isDeleted: boolean;\n\n  constructor(private store: Store<MoviesState>,\n              private activatedRoute: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.activatedRoute.paramMap.subscribe(\n      (params: ParamMap) => {\n        this.categoryId = +params.get('id');\n        this.store.dispatch(movieActions.loadMovieByCategoryId({id: this.categoryId}));\n      });\n    this.getAllMoviesForThisCategory();\n  }\n\n  getAllMoviesForThisCategory() {\n    this.movies$ = this.store.select(moviesSelector.getMoviesByCategoryIdSelector);\n  }\n\n\n}\n","<div class=\"w-100 mb-4\" *ngIf=\"(movies$ | async) as movies\">\r\n  <div class=\"container\">\r\n    <h1 class=\"text-center my-4\">All Movies</h1>\r\n    <!--Start Latest Section-->\r\n    <div class=\"latest mt-5\">\r\n      <div class=\"row\">\r\n\r\n        <div class=\"col-12 col-sm-6 col-md-4 col-lg-3\" *ngFor=\"let movie of movies\">\r\n          <div class=\"card w-100 mb-4\" style=\"width: 18rem;\">\r\n            <img class=\"card-img-top\" src=\"{{baseUrl + movie.image}}\" alt=\"Card image cap\">\r\n            <div class=\"card-body\">\r\n              <h5 class=\"card-title\">{{movie.name}}</h5>\r\n              <span class=\"card-subtitle mb-2 text-muted\">{{movie.created_at  | date: 'yyyy-MM-dd'}}</span>\r\n              <p class=\"card-text\">{{movie.description}}</p>\r\n            </div>\r\n          </div>\r\n        </div><!--.col-12-->\r\n\r\n      </div><!--.row-->\r\n    </div><!--.latest-->\r\n  </div><!--.container-->\r\n</div>\r\n<div *ngIf=\"!(movies$ | async)\">\r\n  <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n</div>\r\n\r\n\r\n<app-footer></app-footer>\r\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\nimport { Update } from '@ngrx/entity';\nimport { Store } from '@ngrx/store';\nimport { ToastrService } from 'ngx-toastr';\nimport { Observable } from 'rxjs';\nimport { ImageSnippet } from 'src/app/@theme/model/image-snippet';\nimport { ListCategories } from '../../model/list-categories.model';\nimport { MovieDetailsResponse } from '../../model/movie-details-response';\nimport { MovieDetails } from '../../model/movie-details.model';\nimport { MoviesService } from '../../services/movies.service';\nimport { loadCategories, loadMovie, updateMovie } from '../../store/movies.actions';\nimport { MoviesState } from '../../store/movies.reducer';\nimport { getListCategoiresSelector, getMovieDetailsSelector } from '../../store/movies.selector';\n\n@Component({\n  selector: 'app-edit-movie',\n  templateUrl: './edit-movie.component.html',\n  styleUrls: ['./edit-movie.component.scss']\n})\nexport class EditMovieComponent implements OnInit {\n  categories$: Observable<ListCategories[]>;\n  movieDetails: MovieDetails;\n  movieId: number;\n  isSubmited = false;\n  updateMovieForm: FormGroup;\n  uploadButtonValue = 'Upload';\n  coverUploadButtonValue = 'Upload';\n  imageName = 'Select Image';\n  fileSelected = false;\n  fileUploaded = false;\n  imageUrl: string;\n  imagePathReady = false;\n  submitButtonValue = 'Waiting Uploading Image';\n  selectedFile: ImageSnippet;\n\n  constructor(private store: Store<MoviesState>,\n              private formBuilder: FormBuilder,\n              private movieService: MoviesService,\n              private toaster: ToastrService,\n              private router: Router,\n              private activatedRoute: ActivatedRoute) {\n  }\n\n\n  ngOnInit(): void {\n    this.activatedRoute.paramMap.subscribe(\n      (params: ParamMap) => {\n        this.movieId = +params.get('id');\n        this.store.dispatch(loadMovie({id: this.movieId}));\n        this.store.dispatch(loadCategories());\n      });\n\n    this.updateMovieForm = new FormGroup({\n      id: new FormControl(''),\n      name: new FormControl('', Validators.required),\n      description: new FormControl('', Validators.required),\n      category_id: new FormControl('', Validators.required),\n      image: new FormControl('')\n    });\n    // dispatch categories\n    this.getMovieDetails();\n    // fetch all categories\n    this.getListCategories();\n  }\n\n  getMovieDetails() {\n    this.store.select(getMovieDetailsSelector).subscribe(\n      response => {\n        if (response) {\n          this.movieDetails = response;\n          this.fillMovieForm(response);\n        }\n      }\n    );\n  }\n\n  getListCategories() {\n    this.categories$ = this.store.select(getListCategoiresSelector);\n  }\n\n  fillMovieForm(data: MovieDetails) {\n    this.updateMovieForm = new FormGroup({\n      id: new FormControl(data.id),\n      name: new FormControl(data.name, Validators.required),\n      description: new FormControl(data.description, Validators.required),\n      category_id: new FormControl(data.category_id, Validators.required),\n      image: new FormControl('')\n    });\n  }\n\n\n  updateName(imageInput: any) {\n    const file: File = imageInput.files[0];\n    this.uploadButtonValue = 'upload';\n    this.imageName = file.name;\n    this.fileSelected = true;\n  }\n\n  processFile(imageInput: any) {\n    this.fileSelected = false;\n    this.uploadButtonValue = 'uploading...';\n    console.log('Processing File');\n    const file: File = imageInput.files[0];\n    const reader = new FileReader();\n\n    reader.addEventListener('load', (event: any) => {\n      this.selectedFile = new ImageSnippet(event.target.result, file);\n      this.movieService.uploadImage(this.selectedFile.file).subscribe(\n        (res) => {\n          console.log(res);\n          this.imageUrl = res;\n          this.uploadButtonValue = 'uploaded';\n          this.imagePathReady = true;\n          this.submitButtonValue = 'update-movie';\n        },\n        (err) => {\n          this.uploadButtonValue = 'upload';\n          this.fileSelected = true;\n          this.toaster.error('Network Error, Please Try After a Few Seconds');\n          console.log(err);\n        });\n    });\n    reader.readAsDataURL(file);\n  }\n\n  onSubmit() {\n    if (!this.updateMovieForm.valid) {\n      this.toaster.error('Form Not Valid !');\n      return;\n    }\n    const formObject = this.updateMovieForm.getRawValue();\n    if (this.imageUrl != '') {\n      formObject.image = this.imageUrl;\n    } else {\n      formObject.image = this.movieDetails.image;\n    }\n    const update: Update<MovieDetails> = {\n      id: this.movieId,\n      changes: formObject\n    };\n    this.store.dispatch(updateMovie({data: update}));\n  }\n\n\n\n}\n","<div *ngIf=\"movieDetails != null && (categories$ | async) as categories\">\n    <!-- general form elements -->\n    <div class=\"container-fluid\">\n        <div class=\"content-header\">\n            <h1 class=\"text-center my-5\">Update Movie Page</h1>\n        </div>\n        <div class=\"card card-info\">\n            <div class=\"card-header bg-sidebar-item-button text-white\">\n                <h3 class=\"card-title mb-0\">Update Movie</h3>\n            </div>\n            <!-- /.card-header -->\n            <!-- form start -->\n            <form [formGroup]=\"updateMovieForm\" (ngSubmit)=\"onSubmit()\">\n                <div class=\"card-body\">\n                    <div class=\"form-group\">\n                    <label for=\"exampleInputname1\">name</label>\n                    <input type=\"text\"\n                            [ngClass]=\"{'is-invalid': updateMovieForm.get('name').errors &&\n                                    (updateMovieForm.get('name').touched || updateMovieForm.get('name').dirty)}\"\n                            name=\"name\"\n                            formControlName=\"name\"\n                            id=\"exampleInputname1\"\n                            class=\"form-control\"\n                            placeholder=\"Name\">\n                    <span class=\"invalid-feedback\" *ngIf=\"updateMovieForm.get('name').errors?.required\">Name</span>\n                    </div>\n                    <div class=\"form-group\">\n                    <label for=\"exampleInputdescription\">Description</label>\n                    <div class=\"position-relative\">\n                    <input #descriptionField type=\"description\"\n                            [ngClass]=\"{'is-invalid': updateMovieForm.get('description').errors &&\n                                    (updateMovieForm.get('description').touched || updateMovieForm.get('description').dirty)}\"\n                            name=\"description\"\n                            formControlName=\"description\"\n                            id=\"exampleInputdescription\"\n                            class=\"form-control\"\n                            placeholder=\"Movie Description\">\n                    </div>\n                    <span class=\"invalid-feedback\" *ngIf=\"updateMovieForm.get('description').errors?.required\">Description is required</span>\n                    </div>\n                    <div class=\"form-group\">\n                    <label for=\"exampleInputEmail\">Category</label>\n                    <select name=\"category_id\"\n                            class=\"form-control\"\n                            formControlName=\"category_id\"\n                            id=\"exampleInputcategory_id\"\n                            [ngClass]=\"{'is-invalid': updateMovieForm.get('category_id').errors &&\n                            (updateMovieForm.get('category_id').touched || updateMovieForm.get('category_id').dirty)}\">\n                        <option *ngFor=\"let category of categories\" value=\"{{category.id}}\">{{category.name}}</option>\n                    </select>      \n                    <span class=\"invalid-feedback\" *ngIf=\"updateMovieForm.get('category_id').errors?.required\">Category field is required</span>\n                    </div>\n                    <div class=\"form-group\">\n                    <label for=\"exampleInputupload\">upload</label>\n                    <div class=\"input-group input-group-custom\">\n                        <div class=\"custom-file\">\n                        <input #imageInput type=\"file\" accept=\"image/*\" class=\"custom-file-input\" id=\"file-input\"\n                                (change)=\"updateName(imageInput)\">\n                        <label class=\"custom-file-label\" for=\"file-input\">{{imageName}}</label>\n                        </div>\n                        <div class=\"input-group-append\">\n                        <button class=\"btn btn-success\" type=\"button\" (click)=\"processFile(imageInput)\" [disabled]=!fileSelected>\n                            {{uploadButtonValue}}\n                        </button>\n                        </div>\n                    </div>\n                    </div>\n                </div>\n                <!-- /.card-body -->\n\n                <div class=\"card-footer\">\n                    <button type=\"submit\" class=\"btn bg-sidebar-item-button text-white\" [disabled]=\"updateMovieForm.invalid || isSubmited\">Submit</button>\n                </div>\n            </form>\n        </div>\n        <!-- /.card -->\n    </div>\n</div>\n\n<div *ngIf=\"movieDetails == null && !(categories$ | async)\">\n    <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n</div>","import {Component, Inject, OnInit, Renderer2} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {Store} from '@ngrx/store';\nimport {ToastrService} from 'ngx-toastr';\nimport {ImageSnippet} from '../../../../@theme/model/image-snippet';\nimport {DOCUMENT} from '@angular/common';\nimport { MoviesService } from '../../services/movies.service';\nimport { MoviesState } from '../../store/movies.reducer';\nimport { addMovie, loadCategories } from '../../store/movies.actions';\nimport { getListCategoiresSelector } from '../../store/movies.selector';\nimport { ListCategories } from '../../model/list-categories.model';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-new-movie',\n  templateUrl: './new-movie.component.html',\n  styleUrls: ['./new-movie.component.scss']\n})\nexport class NewMovieComponent implements OnInit {\n  categories$: Observable<ListCategories[]>;\n  addMovieForm: FormGroup;\n  uploadButtonValue = 'upload';\n  imageName = 'select-image';\n  fileSelected = false;\n  imageUrl: string;\n  imagePathReady = false;\n  submitButtonValue = 'waiting-uploading-image';\n  selectedFile: ImageSnippet;\n\n  constructor(private store: Store<MoviesState>,\n              private movieService: MoviesService,\n              private toaster: ToastrService) { }\n\n  ngOnInit(): void {\n    // dispatch categories\n    this.store.dispatch(loadCategories());\n    // init form fields\n    this.addMovieForm = new FormGroup({\n      name: new FormControl('', Validators.required),\n      description: new FormControl('', Validators.required),\n      category_id: new FormControl('', Validators.required),\n      image: new FormControl('')\n    });\n    // fetch all categories\n    this.getListCategories();\n  }\n\n    \n  getListCategories() {\n    this.categories$ = this.store.select(getListCategoiresSelector);\n  }\n\n\n  updateName(imageInput: any) {\n    const file: File = imageInput.files[0];\n    this.uploadButtonValue = 'upload';\n    this.imageName = file.name;\n    this.fileSelected = true;\n  }\n\n  processFile(imageInput: any) {\n    this.fileSelected = false;\n    this.uploadButtonValue = 'uploading...';\n    console.log('Processing File');\n    const file: File = imageInput.files[0];\n    const reader = new FileReader();\n\n    reader.addEventListener('load', (event: any) => {\n      this.selectedFile = new ImageSnippet(event.target.result, file);\n      this.movieService.uploadImage(this.selectedFile.file).subscribe(\n        (res) => {\n          console.log(res);\n          this.imageUrl = res;\n          this.uploadButtonValue = 'uploaded';\n          this.imagePathReady = true;\n          this.submitButtonValue = 'new-movie';\n        },\n        (err) => {\n          this.uploadButtonValue = 'upload';\n          this.fileSelected = true;\n          this.toaster.error('Network Error, Please Try After a Few Seconds');\n          console.log(err);\n        });\n    });\n    reader.readAsDataURL(file);\n  }\n\n  onSubmit() {\n    if (!this.addMovieForm.valid) {\n      this.toaster.error('Form Not Valid !');\n      return;\n    }\n    const formObject = this.addMovieForm.getRawValue();\n    formObject.image = this.imageUrl;\n    this.store.dispatch(addMovie({data: formObject}));\n  }\n\n}\n","<div *ngIf=\"(categories$ | async) as categories\">\n  <!-- general form elements -->\n  <div class=\"container-fluid\">\n    <div class=\"content-header\">\n      <h1 class=\"text-center mt-5 mb-3\">New Movie Page</h1>\n    </div>\n    <div class=\"card card-info mb-5\">\n      <div class=\"card-header bg-light-blue text-white p-3\">\n        <!-- <h3 class=\"card-title mb-0\">{{'new-event' | translate}}</h3> -->\n      </div>\n      <!-- /.card-header -->\n      <!-- form start -->\n      <form [formGroup]=\"addMovieForm\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"card-body\">\n          <div class=\"form-group\">\n            <label for=\"exampleInputname1\">name</label>\n            <input type=\"text\"\n                  [ngClass]=\"{'is-invalid': addMovieForm.get('name').errors &&\n                            (addMovieForm.get('name').touched || addMovieForm.get('name').dirty)}\"\n                  name=\"name\"\n                  formControlName=\"name\"\n                  id=\"exampleInputname1\"\n                  class=\"form-control\"\n                  placeholder=\"Name\">\n            <span class=\"invalid-feedback\" *ngIf=\"addMovieForm.get('name').errors?.required\">Name</span>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"exampleInputdescription\">Description</label>\n            <div class=\"position-relative\">\n            <input #descriptionField type=\"description\"\n                  [ngClass]=\"{'is-invalid': addMovieForm.get('description').errors &&\n                            (addMovieForm.get('description').touched || addMovieForm.get('description').dirty)}\"\n                  name=\"description\"\n                  formControlName=\"description\"\n                  id=\"exampleInputdescription\"\n                  class=\"form-control\"\n                  placeholder=\"Movie Description\">\n            </div>\n            <span class=\"invalid-feedback\" *ngIf=\"addMovieForm.get('description').errors?.required\">Description is required</span>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"exampleInputEmail\">Category</label>\n            <select name=\"category_id\"\n                    class=\"form-control\"\n                    formControlName=\"category_id\"\n                    id=\"exampleInputcategory_id\"\n                    [ngClass]=\"{'is-invalid': addMovieForm.get('category_id').errors &&\n                    (addMovieForm.get('category_id').touched || addMovieForm.get('category_id').dirty)}\">\n              <option *ngFor=\"let category of categories\" value=\"{{category.id}}\">{{category.name}}</option>\n            </select>      \n            <span class=\"invalid-feedback\" *ngIf=\"addMovieForm.get('category_id').errors?.required\">Category field is required</span>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"exampleInputupload\">upload</label>\n            <div class=\"input-group input-group-custom\">\n              <div class=\"custom-file\">\n                <input #imageInput type=\"file\" accept=\"image/*\" class=\"custom-file-input\" id=\"file-input\"\n                      (change)=\"updateName(imageInput)\">\n                <label class=\"custom-file-label\" for=\"file-input\">{{imageName}}</label>\n              </div>\n              <div class=\"input-group-append\">\n                <button class=\"btn btn-success\" type=\"button\" (click)=\"processFile(imageInput)\" [disabled]=!fileSelected>\n                  {{uploadButtonValue}}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <!-- /.card-body -->\n\n        <div class=\"card-footer\">\n          <button type=\"submit\" class=\"btn bg-light-blue text-white\" [disabled]=\"addMovieForm.invalid\">create</button>\n        </div>\n      </form>\n    </div>\n    <!-- /.card -->\n  </div>\n</div>\n<div *ngIf=\"!(categories$ | async)\">\n  <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n</div>","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport {forkJoin, Observable, Subscription} from 'rxjs';\nimport { FooterComponent } from 'src/app/@theme/components';\nimport { AppState } from 'src/app/@theme/store/app-state';\nimport { setLoadSpinner } from 'src/app/@theme/store/shared/shared.actions';\nimport {MoviesService} from './services/movies.service';\nimport {MoviesState} from './store/movies.reducer';\nimport {loadMovies} from './store/movies.actions';\nimport {getListCategoiresSelector, getListMoviesSelector} from './store/movies.selector';\nimport {ListMovies} from './model/list-movies.model';\nimport { AdminConfig } from '../AdminConfig';\nimport { ListCategories } from './model/list-categories.model';\n\n\n@Component({\n  selector: 'app-list-movies',\n  templateUrl: './list-movies.component.html',\n  styleUrls: ['./list-movies.component.scss'],\n  providers: [ FooterComponent ]\n})\nexport class ListMoviesComponent implements OnInit {\n  movies$: Observable<ListMovies[]>;\n  baseUrl = AdminConfig.sourceAPI;\n\n  constructor(private store: Store<MoviesState>) {\n  }\n\n  ngOnInit() {\n    this.store.dispatch(loadMovies());\n    this.getListMovies();\n  }\n\n  getListMovies() {\n    this.movies$ = this.store.select(getListMoviesSelector);\n  }\n\n}\n","<div class=\"w-100 mb-4\" *ngIf=\"(movies$ | async) as movies\">\n  <div class=\"container\">\n    <h1 class=\"text-center my-4\">All Movies</h1>\n    <!--Start Latest Section-->\n    <div class=\"latest mt-5\">\n      <div class=\"row\">\n\n        <div class=\"col-12 col-sm-6 col-md-4 col-lg-3\" *ngFor=\"let movie of movies\">\n          <div class=\"card w-100 mb-4\" style=\"width: 18rem;\">\n            <img class=\"card-img-top\" src=\"{{baseUrl + movie.image}}\" alt=\"Card image cap\">\n            <div class=\"card-body\">\n              <h5 class=\"card-title\">{{movie.name}}</h5>\n              <span class=\"card-subtitle mb-2 text-muted\">{{movie.created_at  | date: 'yyyy-MM-dd'}}</span>\n              <p class=\"card-text\">{{movie.description}}</p>\n            </div>\n          </div>\n        </div><!--.col-12-->\n\n      </div><!--.row-->\n    </div><!--.latest-->\n  </div><!--.container-->\n</div>\n<div *ngIf=\"!(movies$ | async)\">\n  <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n</div>\n\n\n<app-footer></app-footer>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AllCategoriesComponent } from './components/all-categories/all-categories.component';\nimport { AllMoviesComponent } from './components/all-movies/all-movies.component';\nimport { CategoryMoviesComponent } from './components/category-movies/category-movies.component';\nimport { EditMovieComponent } from './components/edit-movie/edit-movie.component';\nimport { NewMovieComponent } from './components/new-movie/new-movie.component';\nimport { ListMoviesComponent } from './list-movies.component';\n\n\nconst routes: Routes = [\n  { path: '', component: ListMoviesComponent },\n  { path: 'all', component: AllMoviesComponent },\n  { path: 'add', component: NewMovieComponent },\n  { path: 'edit/:id', component: EditMovieComponent },\n  { path: 'categories', component: AllCategoriesComponent },\n  { path: 'categories/:id', component: CategoryMoviesComponent },\n  { path: 'dashboard', redirectTo: '', pathMatch: 'full'}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class MoviesRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { ThemeModule } from 'src/app/@theme/theme.module';\n\nimport { MoviesRoutingModule } from './movies-routing.module';\nimport { StoreModule } from '@ngrx/store';\nimport * as fromListMovies from './store/movies.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { ListMoviesComponent } from './list-movies.component';\nimport { NewMovieComponent } from './components/new-movie/new-movie.component';\nimport { AllMoviesComponent } from './components/all-movies/all-movies.component';\nimport { MoviesEffects } from './store/movies.effects';\nimport { EditMovieComponent } from './components/edit-movie/edit-movie.component';\nimport { AllCategoriesComponent } from './components/all-categories/all-categories.component';\nimport { CategoryMoviesComponent } from './components/category-movies/category-movies.component';\n\n@NgModule({\n  declarations: [\n    AllMoviesComponent,\n    ListMoviesComponent,\n    NewMovieComponent,\n    EditMovieComponent,\n    AllCategoriesComponent,\n    CategoryMoviesComponent\n  ],\n  imports: [\n    ThemeModule,\n    MoviesRoutingModule,\n    StoreModule.forFeature(fromListMovies.moviesFeatureKey, fromListMovies.reducer),\n    EffectsModule.forFeature([MoviesEffects])\n  ]\n})\nexport class MoviesModule { }\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {AdminConfig} from '../../AdminConfig';\nimport {ListMoviesResponse} from '../model/list-movies-response';\nimport { ListMovies } from '../model/list-movies.model';\nimport { MovieDetails } from '../model/movie-details.model';\nimport { MovieDetailsResponse } from '../model/movie-details-response';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MoviesService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  getListMovies(): Observable<ListMoviesResponse> {\n    return this.httpClient.get<ListMoviesResponse>(AdminConfig.moviesAPI);\n  }\n\n  getMoviesCategories(): Observable<any> {\n    return this.httpClient.get<any>(AdminConfig.moviesCategoriesAPI);\n  }\n\n  getMoviesByCategoryId(categoryId: number): Observable<ListMoviesResponse> {\n    return this.httpClient.get<ListMoviesResponse>(`${AdminConfig.categoryMoviesAPI}/${categoryId}`);\n  }\n\n  getMovieDetails(movieId: number): Observable<MovieDetailsResponse> {\n    return this.httpClient.get<MovieDetailsResponse>(`${AdminConfig.moviesAPI}/${movieId}`);\n  }\n\n  newMovie(data): Observable<ListMovies> {\n    return this.httpClient.post<ListMovies>(AdminConfig.moviesAPI, data);\n  }\n  \n  updateMovie(movieId: number, data: any): Observable<any> {\n    return this.httpClient.put(\n      `${AdminConfig.moviesAPI}/${movieId}`,\n      JSON.stringify(data)\n    );\n  }\n\n  deleteMovie(id: number): Observable<any> {\n    return this.httpClient.delete(\n      `${AdminConfig.moviesAPI}/${id}`\n    );\n  }\n\n  //Upload Image\n  public uploadImage(image: File): Observable<string> {\n    const formData = new FormData();\n    formData.append('image', image);\n    return this.httpClient.post<string>(AdminConfig.generalUploadAPI, formData);\n  }\n}\n","import { createAction, props } from '@ngrx/store';\nimport { Update } from '@ngrx/entity';\n\nimport { ListMovies } from '../model/list-movies.model';\nimport { MovieDetails } from '../model/movie-details.model';\n\nexport const loadMovies = createAction(\n  '[Movies/API] Load Movies'\n);\n\nexport const loadMoviesSuccess = createAction(\n  '[Movies/API] Load Movies Success',\n  props<{ message: ListMovies[] }>()\n);\n\nexport const loadMoviesFailure = createAction(\n  '[Movies/API] Load Movies Failure',\n  props<{ error: string }>()\n);\n\nexport const loadMovie = createAction(\n  '[Movies/API] Load Movie',\n  props<{ id: number }>()\n);\n\nexport const loadMovieSuccess = createAction(\n  '[Movies/API] Load Movie Success',\n  props<{ message: MovieDetails }>()\n);\n\nexport const loadMovieFailure = createAction(\n  '[Movies/API] Load Movie Failure',\n  props<{ error: string }>()\n);\n\nexport const addMovie = createAction(\n  '[Movies/API] Add Movie',\n  props<{ data: ListMovies }>()\n);\n\nexport const addMovieSuccess = createAction(\n  '[Movies/API] Add Movie Success'\n);\n\nexport const addMovieFailure = createAction(\n  '[Movies/API] Add Movie Failure',\n  props<{ error: string }>()\n);\n\nexport const loadCategories = createAction(\n  '[Movies/API] Load Categories'\n);\n\nexport const loadCategoriesSuccess = createAction(\n  '[Movies/API] Load Categories Success',\n  props<{ message: any }>()\n);\n\nexport const loadCategoriesFailure = createAction(\n  '[Movies/API] Load Categories Failure',\n  props<{ error: string }>()\n);\n\nexport const loadMovieByCategoryId = createAction(\n  '[Movies/API] Load Movies By Category Id',\n  props<{ id: number }>()\n\n);\n\nexport const loadMovieByCategoryIdSuccess = createAction(\n  '[Movies/API] Load Movies By Category Id Success',\n  props<{ message: ListMovies[] }>()\n);\n\nexport const loadMovieByCategoryIdFailure = createAction(\n  '[Movies/API] Load Movies By Category Id Failure',\n  props<{ error: string }>()\n);\n\nexport const updateMovie = createAction(\n  '[Movies/API] Update Movie',\n  props<{ data: Update<ListMovies> }>()\n);\n\nexport const updateMovieSuccess = createAction(\n  '[Movies/API] Update Movie Success'\n);\n\nexport const updateMovieFailure = createAction(\n  '[Movies/API] Update Movie Failure',\n  props<{ error: string }>()\n);\n\nexport const deleteMovie = createAction(\n  '[Movies/API] Delete Movie',\n  props<{ id: number }>()\n);\n\nexport const deleteMovieSuccess = createAction(\n  '[Movies/API] Delete Movie Success',\n  props<{ id: number }>()\n);\n\nexport const deleteMovieFailure = createAction(\n  '[Movies/API] Delete Movie Failure',\n  props<{ error: string }>()\n);\n\n","import { Injectable } from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport * as moviesActions from './movies.actions';\nimport {catchError, concatMap, exhaustMap, map, mergeMap, switchMap, tap} from 'rxjs/operators';\nimport {of} from 'rxjs';\nimport { MoviesService } from '../services/movies.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { MoviesState } from './movies.reducer';\nimport { ToastrService } from 'ngx-toastr';\n\n\n\n@Injectable()\nexport class MoviesEffects {\n\n  constructor(private actions$: Actions,\n              private store: Store<MoviesState>,\n              private router: Router,\n              private toasterService: ToastrService,\n              private activatedRouter: ActivatedRoute,\n              private moviesService: MoviesService) {}\n\n  loadListMoviesEffect$ = createEffect(() => this.actions$.pipe(\n    ofType(moviesActions.loadMovies),\n    switchMap(() => this.moviesService.getListMovies()\n      .pipe(\n        map(response => moviesActions.loadMoviesSuccess({message: response.message})),\n        catchError(error => of(moviesActions.loadMoviesFailure({error})))\n      ))\n  ));\n\n  loadListCategoriesEffect$ = createEffect(() => this.actions$.pipe(\n    ofType(moviesActions.loadCategories),\n    switchMap(() => this.moviesService.getMoviesCategories()\n      .pipe(\n        map(response => moviesActions.loadCategoriesSuccess({message: response.message})),\n        catchError(error => of(moviesActions.loadCategoriesFailure({error})))\n      ))\n  ));\n\n  loadCategoryMovies$ = createEffect(() => this.actions$.pipe(\n    ofType(moviesActions.loadMovieByCategoryId),\n    switchMap(action => this.moviesService.getMoviesByCategoryId(+action.id)\n      .pipe(\n        map(response => {\n          return moviesActions.loadMovieByCategoryIdSuccess({message: response.message});\n        }),\n        catchError(error => of(moviesActions.loadMovieByCategoryIdFailure(error)))\n      ))\n  ));\n\n  loadMovie$ = createEffect(() => this.actions$.pipe(\n    ofType(moviesActions.loadMovie),\n    switchMap(action => this.moviesService.getMovieDetails(+action.id)\n      .pipe(\n        map(response => {\n          return moviesActions.loadMovieSuccess({message: response.message});\n        }),\n        catchError(error => of(moviesActions.loadMovieFailure(error)))\n      ))\n  ));\n\n  newMovieEffect$ = createEffect(() => this.actions$.pipe(\n    ofType(moviesActions.addMovie),\n    exhaustMap(action => this.moviesService.newMovie(+action.data)\n      .pipe(\n        map(response => {\n          this.toasterService.success('Your Movie Successfully Created');\n          return moviesActions.addMovieSuccess()\n        }),\n        catchError(error => of(moviesActions.addMovieFailure({error})))\n      ))\n  ));\n\n  redirectNewMovieEffect$ = createEffect(() => this.actions$.pipe(\n    ofType(moviesActions.addMovieSuccess),\n    tap(res => this.router.navigate(['../'], {relativeTo: this.activatedRouter}))\n  ), { dispatch: false });\n  \n  \n  deleteMovie$ = createEffect(() => this.actions$.pipe(\n    ofType(moviesActions.deleteMovie),\n    mergeMap(action => this.moviesService.deleteMovie(action.id)\n    .pipe(\n      map(response => {\n        this.toasterService.success('Your Movie Successfully Deleted');\n        this.store.dispatch(moviesActions.loadMovies());\n        return moviesActions.deleteMovieSuccess({ id: action.id });\n      }),\n      catchError(error => of(moviesActions.deleteMovieFailure({error})))\n    ))\n  ));\n\n  updateMovie$ = createEffect(() => this.actions$.pipe(\n    ofType(moviesActions.updateMovie),\n    concatMap(action => this.moviesService.updateMovie(\n        +action.data.id,\n        action.data.changes\n      )\n    ),\n    tap(res => {\n      this.toasterService.success('Your Movie Successfully Updated');\n      return this.router.navigate(['/all']);\n    })\n    ), { dispatch: false }   // We Must Use Dispatch To False To Work Correctly\n  );\n}\n","import { Action, createReducer, on } from '@ngrx/store';\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { ListMovies } from '../model/list-movies.model';\nimport * as moviesActions from './movies.actions';\nimport { ListCategories } from '../model/list-categories.model';\nimport { MovieDetails } from '../model/movie-details.model';\n\nexport const moviesFeatureKey = 'movies';\n\nexport interface MoviesState extends EntityState<ListMovies> {\n  // additional entities state properties\n  message: ListMovies[];\n  categoryMovies: ListMovies[];\n  categories: ListCategories[];\n  movieDetails: MovieDetails;\n  error: string;\n}\n\nexport const adapter: EntityAdapter<ListMovies> = createEntityAdapter<ListMovies>();\n\nexport const initialState: MoviesState = adapter.getInitialState({\n  // additional entity state properties\n  message: undefined,\n  categoryMovies: undefined,\n  categories: undefined,\n  movieDetails: undefined,\n  error: undefined\n});\n\n\nexport const reducer = createReducer(\n  initialState,\n  on(moviesActions.loadMoviesSuccess,\n    (state, action) => {\n      return {\n        ...state,\n        message: action.message\n      };\n    }\n  ),\n  on(moviesActions.loadMovieSuccess,\n    (state, action) => {\n      return {\n        ...state,\n        movieDetails: action.message\n      };\n    }\n  ),\n  on(moviesActions.loadCategoriesSuccess,\n    (state, action) => {\n      return {\n        ...state,\n        categories: action.message\n      }\n  }),\n  on(moviesActions.loadMovieByCategoryIdSuccess,\n    (state, action) => {\n      return {\n        ...state,\n        categoryMovies: action.message\n      };\n    }\n  ),\n  on(moviesActions.addMovie,\n    (state, action) => adapter.addOne(action.data, state)),\n  on(moviesActions.addMovieFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(moviesActions.deleteMovieSuccess,\n    (state, action) => adapter.removeOne(action.id, state)\n  ),\n  on(moviesActions.deleteMovieFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      }\n  }),\n  on(moviesActions.updateMovie,\n    (state, action) => adapter.updateOne(action.data, state)\n  ),\n);\n\n\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal,\n} = adapter.getSelectors();\n","import {createFeatureSelector, createSelector} from '@ngrx/store';\r\nimport {MoviesState, moviesFeatureKey, selectAll} from './movies.reducer';\r\n\r\nconst listMoviesFeatureState = createFeatureSelector(moviesFeatureKey);\r\n\r\nexport const getListMoviesSelector = createSelector(listMoviesFeatureState, (state: MoviesState) => state.message);\r\n\r\nexport const getListCategoiresSelector = createSelector(listMoviesFeatureState, (state: MoviesState) => state.categories);\r\n\r\nexport const getMoviesByCategoryIdSelector = createSelector(listMoviesFeatureState, (state: MoviesState) => state.categoryMovies);\r\n\r\nexport const getMovieDetailsSelector = createSelector(listMoviesFeatureState, (state: MoviesState) => state.movieDetails);\r\n\r\nexport const getListMoviesErrorSelector = createSelector(listMoviesFeatureState, (state: MoviesState) => state.error);\r\n"],"sourceRoot":"webpack:///"}