{"version":3,"sources":["webpack:///src/app/pages/register/components/login/login.component.ts","webpack:///src/app/pages/register/components/login/login.component.html","webpack:///src/app/pages/register/components/signup/signup.component.ts","webpack:///src/app/pages/register/components/signup/signup.component.html","webpack:///src/app/pages/register/register-routing.module.ts","webpack:///src/app/pages/register/register.component.ts","webpack:///src/app/pages/register/register.module.ts","webpack:///src/app/pages/register/service/register.service.ts","webpack:///src/app/pages/register/store/auth.effects.ts","webpack:///src/app/pages/register/store/auth.selector.ts"],"names":["LoginComponent","store","errors","error","process","loginForm","email","password","select","subscribe","dispatch","status","data","getRawValue","onSubmit","selector","templateUrl","styleUrls","SignupComponent","authService","tokenService","registerService","signupForm","name","fromObject","Signup","response","message","handle","authorisation","token","changeAuthStatus","routes","path","component","RegisterRoutingModule","forChild","imports","exports","RegisterComponent","template","RegisterModule","forFeature","declarations","providers","RegisterService","httpClient","httpOptions","post","loginAPI","JSON","stringify","pipe","errorHandler","signupAPI","headers","providedIn","AuthEffects","actions$","router","activatedRouter","startLogin$","action","login","errorMessage","autoRedirect$","res","navigate","relativeTo","authFeatureState","getErrorAuth","state"],"mappings":"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","file":"pages-register-register-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { RegisterService } from '../../service/register.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { TokenService } from 'src/app/@theme/admin-service/token/token.service';\r\nimport { AuthService } from 'src/app/@theme/admin-service/auth/auth.service';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from 'src/app/@theme/store/app-state';\r\nimport { startLogin } from '../../store/auth.actions';\r\nimport { getErrorAuth } from '../../store/auth.selector';\r\nimport { Observable } from 'rxjs';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { setLoadSpinner } from 'src/app/@theme/store/shared/shared.actions';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  errors = [];\r\n  error = null;\r\n  process = false;\r\n\r\n  constructor(private store: Store<AppState>) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = new FormGroup({\r\n      email: new FormControl(''),\r\n      password: new FormControl('')\r\n    });\r\n    // Get Error Messages\r\n    this.store.select(getErrorAuth).subscribe(\r\n      error => {\r\n        this.process = false;\r\n        this.error = error; \r\n      }\r\n    );\r\n  }\r\n\r\n  onSubmit() {\r\n    this.process = true;\r\n    // Form Code\r\n    this.store.dispatch(setLoadSpinner({status: true}));\r\n    this.store.dispatch(startLogin({data: this.loginForm.getRawValue()}));\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"col-12 col-sm-11 col-md-9 col-lg-7 col-xl-7 mx-auto my-5\">\r\n  <h1 class=\"text-center text-muted mb-3\">Login Page</h1>\r\n  <div class=\"card\">\r\n    <div class=\"cord-header\"></div>\r\n    <div class=\"card-body\">\r\n      <div class=\"alert alert-danger mb-0 my-2\" [hidden]=\"!error\">\r\n        {{ error }}\r\n      </div>\r\n      <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"form-group row\">\r\n          <label for=\"inputEmail3\" class=\"col-12 col-sm-2 col-md-3 col-lg-2 col-xl-2 col-form-label\">Email</label>\r\n          <div class=\"col-12 col-sm-10 col-md-9 col-lg-10 col-xl-10\">\r\n            <input type=\"text\" name=\"email\" formControlName=\"email\" class=\"form-control\" id=\"inputEmail3\" placeholder=\"email\" required>\r\n            <div class=\"alert alert-danger mb-0 mt-2\" [hidden]=\"!errors['email']\">\r\n              {{ errors['email'] }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <label for=\"inputPassword3\" class=\"col-12 col-sm-2 col-md-3 col-lg-2 col-xl-2 col-form-label\">Password</label>\r\n          <div class=\"col-12 col-sm-10 col-md-9 col-lg-10 col-xl-10\">\r\n            <input type=\"password\" name=\"password\" formControlName=\"password\" class=\"form-control\" id=\"inputPassword3\" placeholder=\"Password\" required>\r\n            <div class=\"alert alert-danger mb-0 mt-2\" [hidden]=\"!errors['password']\">\r\n              {{ errors['password'] }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <div class=\"col-12\">\r\n            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!loginForm.valid\">Login</button>\r\n            <small class=\"text-success m-2\" *ngIf=\"process\">Procressing ....</small>\r\n          </div>\r\n          <div class=\"col-12 mt-3\">\r\n            Don't have an account? <a routerLink=\"/auth/signup\" class=\"text-danger\">Register Now</a>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { RegisterService } from '../../service/register.service';\r\nimport { TokenService } from 'src/app/@theme/admin-service/token/token.service';\r\nimport { AuthService } from 'src/app/@theme/admin-service/auth/auth.service';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from 'src/app/@theme/store/app-state';\r\nimport { successSignup } from '../../store/auth.actions';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { setLoadSpinner } from 'src/app/@theme/store/shared/shared.actions';\r\n\r\n@Component({\r\n  selector: 'app-signup',\r\n  templateUrl: './signup.component.html',\r\n  styleUrls: ['./signup.component.scss']\r\n})\r\nexport class SignupComponent implements OnInit {\r\n  signupForm: FormGroup;\r\n  errors = [];\r\n  error = null;\r\n  process = false;\r\n\r\n  constructor(private store: Store<AppState>,\r\n              private authService: AuthService,\r\n              private tokenService: TokenService,\r\n              private registerService: RegisterService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.signupForm = new FormGroup({\r\n      name: new FormControl(''),\r\n      email: new FormControl(''),\r\n      password: new FormControl('')\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    this.process = true;\r\n    // Run loading spinner\r\n    this.store.dispatch(setLoadSpinner({status: true}));\r\n    const fromObject = this.signupForm.getRawValue();\r\n    this.registerService.Signup(fromObject).subscribe(\r\n      response => {\r\n        this.process = false;\r\n        // handle error message\r\n        if (response.status == 'failed') {\r\n          this.errors = response.message;\r\n          return;\r\n        }\r\n        // Store Token\r\n        this.tokenService.handle(fromObject.email, response.authorisation.token);        \r\n        // change Auth Status\r\n        this.authService.changeAuthStatus(true);\r\n        // stop loading spinner\r\n        this.store.dispatch(setLoadSpinner({status: false}));\r\n        // dispatch success signup to make auto redirect\r\n        this.store.dispatch(successSignup());\r\n      });\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"col-12 col-sm-11 col-md-9 col-lg-7 col-xl-7 mx-auto my-5\">\r\n  <h1 class=\"text-center text-muted mb-3\">Register Page</h1>\r\n  <div class=\"card\">\r\n    <div class=\"cord-header\"></div>\r\n    <div class=\"card-body\">\r\n      <div class=\"alert alert-danger mb-0 my-2\" [hidden]=\"!error\">\r\n        {{ error }}\r\n      </div>\r\n      <form [formGroup]=\"signupForm\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"form-group row\">\r\n          <label for=\"inputName3\" class=\"col-12 col-sm-2 col-md-3 col-lg-2 col-xl-2 col-form-label\">Name</label>\r\n          <div class=\"col-12 col-sm-10 col-md-9 col-lg-10 col-xl-10\">\r\n            <input type=\"text\" name=\"name\" formControlName=\"name\" class=\"form-control\" id=\"inputName3\" placeholder=\"name\" required>\r\n            <div class=\"alert alert-danger mb-0 mt-2\" [hidden]=\"!errors['name']\">\r\n              {{ errors['name'] }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <label for=\"inputEmail3\" class=\"col-12 col-sm-2 col-md-3 col-lg-2 col-xl-2 col-form-label\">Email</label>\r\n          <div class=\"col-12 col-sm-10 col-md-9 col-lg-10 col-xl-10\">\r\n            <input type=\"text\" name=\"email\" formControlName=\"email\" class=\"form-control\" id=\"inputEmail3\" placeholder=\"email\" required>\r\n            <div class=\"alert alert-danger mb-0 mt-2\" [hidden]=\"!errors['email']\">\r\n              {{ errors['email'] }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <label for=\"inputPassword3\" class=\"col-12 col-sm-2 col-md-3 col-lg-2 col-xl-2 col-form-label\">Password</label>\r\n          <div class=\"col-12 col-sm-10 col-md-9 col-lg-10 col-xl-10\">\r\n            <input type=\"password\" name=\"password\" formControlName=\"password\" class=\"form-control\" id=\"inputPassword3\" placeholder=\"Password\" required>\r\n            <div class=\"alert alert-danger mb-0 mt-2\" [hidden]=\"!errors['password']\">\r\n              {{ errors['password'] }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <div class=\"col-12\">\r\n            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!signupForm.valid\">Signup</button>\r\n            <small class=\"text-success m-2\" *ngIf=\"process\">Procressing ....</small>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './components/login/login.component';\nimport { SignupComponent } from './components/signup/signup.component';\n\n\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent },\n  { path: 'signup', component: SignupComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RegisterRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-register',\n  template: `<router-outlet><router-outlet>`\n})\nexport class RegisterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { ThemeModule } from 'src/app/@theme/theme.module';\nimport { RegisterRoutingModule } from './register-routing.module';\n\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './register.component';\n\nimport { RegisterService } from './service/register.service';\nimport { EffectsModule } from '@ngrx/effects';\nimport { AuthEffects } from './store/auth.effects';\nimport { SignupComponent } from './components/signup/signup.component';\n\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    SignupComponent,\n    RegisterComponent,\n  ],\n  imports: [\n    ThemeModule,\n    RegisterRoutingModule,\n    EffectsModule.forFeature([AuthEffects])\n  ],\n  providers: [RegisterService]\n})\nexport class RegisterModule { }\n","import { ErrorHandler, Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { LoginRequest } from '../entity/login-request';\r\nimport { AdminConfig } from '../../AdminConfig';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RegisterService {\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  // Handling the error\r\n  private static errorHandler(error: HttpErrorResponse) {\r\n    return throwError(error || 'Server Error');\r\n  }\r\n\r\n\r\n  login(data): Observable<any> {\r\n    const httpOptions = this.httpOptions();\r\n    return this.httpClient.post<any>(\r\n      AdminConfig.loginAPI, \r\n      JSON.stringify(data),\r\n      httpOptions\r\n      ).pipe(catchError(RegisterService.errorHandler));\r\n  }\r\n\r\n  Signup(data): Observable<any> {\r\n    const httpOptions = this.httpOptions(); \r\n    return this.httpClient.post<any>(\r\n      AdminConfig.signupAPI, \r\n      JSON.stringify(data),\r\n      httpOptions\r\n      ).pipe(catchError(RegisterService.errorHandler));\r\n  }\r\n\r\n  private httpOptions() {\r\n    return {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n      })\r\n    };\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs';\nimport { catchError, exhaustMap, map, tap } from 'rxjs/operators';\nimport { AuthService } from 'src/app/@theme/admin-service/auth/auth.service';\nimport { TokenService } from 'src/app/@theme/admin-service/token/token.service';\nimport { AppState } from 'src/app/@theme/store/app-state';\nimport { setLoadSpinner } from 'src/app/@theme/store/shared/shared.actions';\nimport { LoginResponse } from '../entity/login-response';\nimport { SignupResponse } from '../entity/signup-response';\nimport { RegisterService } from '../service/register.service';\nimport * as authAction from './auth.actions';\n\n\n\n@Injectable()\nexport class AuthEffects {\n\n  constructor(private actions$: Actions,\n              private store: Store<AppState>,\n              private registerService: RegisterService,\n              private authService: AuthService,\n              private router: Router,\n              private activatedRouter: ActivatedRoute,\n              private tokenService: TokenService) {}\n\n  startLogin$ = createEffect(() => this.actions$.pipe(\n    ofType(authAction.startLogin),\n    exhaustMap(action => this.registerService.login(action.data)\n      .pipe(\n        map((response: LoginResponse) => {\n          this.tokenService.handle(action.data.email, response.authorisation.token);        \n          this.authService.changeAuthStatus(true);\n          this.store.dispatch(setLoadSpinner({status: false}));\n          return authAction.successLogin();\n        }),\n        catchError(error => {\n          let errorMessage: string;\n          if (error.error.error) {\n            errorMessage = error.error.error;\n          } else if (error.error.message) {\n            errorMessage = error.error.message;\n          } else if (error.error.errors) {\n            errorMessage = error.error.errors;\n          }\n          \n          this.store.dispatch(setLoadSpinner({status: false}));\n          return of(authAction.failureLogin({error: errorMessage}));\n        })\n      ))\n  ));\n\n  // Redirect After Success Login\n  autoRedirect$ = createEffect(() => this.actions$.pipe(\n    ofType(...[authAction.successLogin, authAction.successSignup]),\n    tap(res => this.router.navigate(['../../'], {relativeTo: this.activatedRouter}))\n  ), { dispatch: false });\n\n}\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\r\nimport { authsFeatureKey, AuthState } from \"./auth.reducer\";\r\n\r\nconst authFeatureState = createFeatureSelector<AuthState>(authsFeatureKey);\r\n\r\nexport const getErrorAuth = createSelector(authFeatureState, state => state.error);"]}