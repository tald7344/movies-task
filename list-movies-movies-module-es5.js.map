{"version":3,"sources":["webpack:///src/app/@theme/model/image-snippet.ts","webpack:///src/app/pages/list-movies/components/all-categories/all-categories.component.ts","webpack:///src/app/pages/list-movies/components/all-categories/all-categories.component.html","webpack:///src/app/pages/list-movies/components/all-movies/all-movies.component.ts","webpack:///src/app/pages/list-movies/components/all-movies/all-movies.component.html","webpack:///src/app/pages/list-movies/components/category-movies/category-movies.component.ts","webpack:///src/app/pages/list-movies/components/category-movies/category-movies.component.html","webpack:///src/app/pages/list-movies/components/edit-movie/edit-movie.component.ts","webpack:///src/app/pages/list-movies/components/edit-movie/edit-movie.component.html","webpack:///src/app/pages/list-movies/components/new-movie/new-movie.component.ts","webpack:///src/app/pages/list-movies/components/new-movie/new-movie.component.html","webpack:///src/app/pages/list-movies/list-movies.component.ts","webpack:///src/app/pages/list-movies/list-movies.component.html","webpack:///src/app/pages/list-movies/movies-routing.module.ts","webpack:///src/app/pages/list-movies/movies.module.ts","webpack:///src/app/pages/list-movies/services/movies.service.ts","webpack:///src/app/pages/list-movies/store/movies.actions.ts","webpack:///src/app/pages/list-movies/store/movies.effects.ts","webpack:///src/app/pages/list-movies/store/movies.reducer.ts","webpack:///src/app/pages/list-movies/store/movies.selector.ts"],"names":["ImageSnippet","src","file","AllCategoriesComponent","store","dispatch","getAllCategories","categories$","select","selector","templateUrl","styleUrls","AllMoviesComponent","baseUrl","sourceAPI","getAllMovies","movies$","movieId","confirm","id","CategoryMoviesComponent","activatedRoute","paramMap","subscribe","params","categoryId","get","getAllMoviesForThisCategory","EditMovieComponent","formBuilder","movieService","toaster","router","isSubmited","uploadButtonValue","coverUploadButtonValue","imageName","fileSelected","fileUploaded","imagePathReady","submitButtonValue","updateMovieForm","name","required","description","category_id","image","getMovieDetails","getListCategories","response","movieDetails","fillMovieForm","data","imageInput","files","console","log","reader","FileReader","addEventListener","event","selectedFile","target","result","uploadImage","res","imageUrl","err","error","readAsDataURL","valid","formObject","getRawValue","update","changes","NewMovieComponent","addMovieForm","ListMoviesComponent","getListMovies","providers","routes","path","component","redirectTo","pathMatch","MoviesRoutingModule","forChild","imports","exports","MoviesModule","forFeature","declarations","MoviesService","httpClient","moviesAPI","moviesCategoriesAPI","categoryMoviesAPI","post","put","JSON","stringify","formData","FormData","append","generalUploadAPI","providedIn","loadMovies","loadMoviesSuccess","loadMoviesFailure","loadMovie","loadMovieSuccess","loadMovieFailure","addMovie","addMovieSuccess","addMovieFailure","loadCategories","loadCategoriesSuccess","loadCategoriesFailure","loadMovieByCategoryId","loadMovieByCategoryIdSuccess","loadMovieByCategoryIdFailure","updateMovie","updateMovieSuccess","updateMovieFailure","deleteMovie","deleteMovieSuccess","deleteMovieFailure","MoviesEffects","actions$","toasterService","activatedRouter","moviesService","loadListMoviesEffect$","pipe","message","loadListCategoriesEffect$","getMoviesCategories","loadCategoryMovies$","action","getMoviesByCategoryId","loadMovie$","newMovieEffect$","newMovie","success","redirectNewMovieEffect$","navigate","relativeTo","deleteMovie$","updateMovie$","moviesFeatureKey","adapter","initialState","getInitialState","undefined","categoryMovies","categories","reducer","state","addOne","removeOne","updateOne","getSelectors","selectIds","selectEntities","selectAll","selectTotal","listMoviesFeatureState","getListMoviesSelector","getListCategoiresSelector","getMoviesByCategoryIdSelector","getMovieDetailsSelector","getListMoviesErrorSelector"],"mappings":"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","file":"list-movies-movies-module-es5.js","sourcesContent":["export class ImageSnippet {\r\n    constructor(public src: string, public file: File) {}\r\n}","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport * as movieActions from '../../store/movies.actions';\nimport * as moviesSelector from '../../store/movies.selector';\nimport { MoviesState } from '../../store/movies.reducer';\nimport { ListMovies } from '../../model/list-movies.model';\n\n\n@Component({\n  selector: 'app-all-categories',\n  templateUrl: './all-categories.component.html',\n  styleUrls: ['./all-categories.component.scss']\n})\nexport class AllCategoriesComponent implements OnInit {\n  categories$: Observable<ListMovies[]>;\n  isDeleted: boolean;\n\n  constructor(private store: Store<MoviesState>) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(movieActions.loadCategories());\n    this.getAllCategories();\n  }\n\n  getAllCategories() {\n    this.categories$ = this.store.select(moviesSelector.getListCategoiresSelector);\n  }\n\n}\n","<div class=\"w-100 mb-4\" *ngIf=\"(categories$| async) as categories\">\r\n  <div class=\"container\">\r\n    <h1 class=\"text-center my-4\">Categories</h1>\r\n    <!--Start Latest Section-->\r\n    <div class=\"latest mt-5\">\r\n      <div class=\"row\">\r\n\r\n        <div class=\"col-12 col-sm-6 col-md-4 col-lg-3\" *ngFor=\"let category of categories\">\r\n          <div class=\"card w-100 mb-4\" style=\"width: 18rem;\">\r\n            <a routerLink=\"/categories/{{category.id}}\">\r\n              <div class=\"card-body\">\r\n                <h5 class=\"card-title text-primary\">{{category.name}}</h5>\r\n                <span class=\"card-subtitle mb-2 text-muted\">{{(category.created_at | date: 'yyyy-MM-dd')}}</span>\r\n              </div>\r\n            </a>\r\n          </div>\r\n        </div><!--.col-12-->\r\n\r\n      </div><!--.row-->\r\n    </div><!--.latest-->\r\n  </div><!--.container-->\r\n</div>\r\n<div *ngIf=\"!(categories$ | async)\">\r\n  <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n</div>\r\n\r\n\r\n<app-footer></app-footer>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { interval, Observable, Subject, Subscription } from 'rxjs';\nimport * as movieActions from '../../store/movies.actions';\nimport * as moviesSelector from '../../store/movies.selector';\nimport { MoviesState } from '../../store/movies.reducer';\nimport { ListMovies } from '../../model/list-movies.model';\nimport { AdminConfig } from 'src/app/pages/AdminConfig';\n\n\n@Component({\n  selector: 'app-all-movies',\n  templateUrl: './all-movies.component.html',\n  styleUrls: ['./all-movies.component.scss']\n})\nexport class AllMoviesComponent implements OnInit {\n  movies$: Observable<ListMovies[]>;\n  baseUrl = AdminConfig.sourceAPI;\n  isDeleted: boolean;\n\n  constructor(private store: Store<MoviesState>) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(movieActions.loadMovies());\n    this.getAllMovies();\n  }\n\n  getAllMovies() {\n    this.movies$ = this.store.select(moviesSelector.getListMoviesSelector);\n  }\n\n  delete(movieId: number) {\n    if (confirm('Are you sure you want to delete this Movie ?')) {\n      this.store.dispatch(movieActions.deleteMovie({id: movieId}));\n    }\n  }\n\n}\n","<div *ngIf=\"(movies$ | async) as movies\">\r\n  <!-- <div *ngIf=\"regionsList.length !== 0\"> -->\r\n  <!-- <div class=\"container-fluid\"> -->\r\n  <h1 class=\"text-center details-title my-4\">Manage Movies Page</h1>\r\n\r\n  <div class=\"table-responsive text-center\">\r\n    <table class=\"table table-bordered main-table\">\r\n      <tr class=\"bg-dark text-white\">\r\n        <td>Image</td>\r\n        <td>Name</td>\r\n        <td>Description</td>\r\n<!--        <td>{{'phone-number' | translate}}</td>-->\r\n        <td>Created At</td>\r\n        <td>Control</td>\r\n      </tr>\r\n      <tr *ngFor=\"let movie of movies\">\r\n        <td><img src=\"{{baseUrl + movie?.image}}\" alt=\"{{movie?.name}} Image\" class=\"img-thumbnail img-custom\"></td>\r\n        <td>{{movie?.name ? movie?.name : '-'}}</td>\r\n        <td>{{movie?.description ? movie?.description : '-'}}</td>\r\n<!--        <td>{{admin?.phoneNumber ? admin?.phoneNumber : '-'}}</td>-->\r\n        <td>{{ movie.created_at ? (movie.created_at | date: 'yyyy-MM-dd') : '-'}}</td>\r\n        <td>\r\n          <a class=\"btn btn-success btn-sm mr-1 mb-1\" routerLink=\"/edit/{{movie.id}}\">\r\n            Edit\r\n          </a>\r\n          <a (click)=\"delete(movie?.id)\" class=\"btn btn-danger confirm btn-sm mr-1 mb-1 {{isDeleted ? 'disabled' : ''}}\">\r\n            Delete\r\n          </a>\r\n        </td>\r\n      </tr>\r\n    </table>\r\n  </div>\r\n</div>\r\n<div *ngIf=\"!(movies$ | async)\">\r\n  <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n</div>\r\n\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport * as movieActions from '../../store/movies.actions';\nimport * as moviesSelector from '../../store/movies.selector';\nimport { MoviesState } from '../../store/movies.reducer';\nimport { ListMovies } from '../../model/list-movies.model';\nimport { AdminConfig } from 'src/app/pages/AdminConfig';\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\n\n\n@Component({\n  selector: 'app-category-movies',\n  templateUrl: './category-movies.component.html',\n  styleUrls: ['./category-movies.component.scss']\n})\nexport class CategoryMoviesComponent implements OnInit {\n  movies$: Observable<ListMovies[]>;\n  categoryId: number;\n  baseUrl = AdminConfig.sourceAPI;\n  isDeleted: boolean;\n\n  constructor(private store: Store<MoviesState>,\n              private activatedRoute: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.activatedRoute.paramMap.subscribe(\n      (params: ParamMap) => {\n        this.categoryId = +params.get('id');\n        this.store.dispatch(movieActions.loadMovieByCategoryId({id: this.categoryId}));\n      });\n    this.getAllMoviesForThisCategory();\n  }\n\n  getAllMoviesForThisCategory() {\n    this.movies$ = this.store.select(moviesSelector.getMoviesByCategoryIdSelector);\n  }\n\n\n}\n","<div class=\"w-100 mb-4\" *ngIf=\"(movies$ | async) as movies\">\r\n  <div class=\"container\">\r\n    <h1 class=\"text-center my-4\">All Movies</h1>\r\n    <!--Start Latest Section-->\r\n    <div class=\"latest mt-5\">\r\n      <div class=\"row\">\r\n\r\n        <div class=\"col-12 col-sm-6 col-md-4 col-lg-3\" *ngFor=\"let movie of movies\">\r\n          <div class=\"card w-100 mb-4\" style=\"width: 18rem;\">\r\n            <img class=\"card-img-top\" src=\"{{baseUrl + movie.image}}\" alt=\"Card image cap\">\r\n            <div class=\"card-body\">\r\n              <h5 class=\"card-title\">{{movie.name}}</h5>\r\n              <span class=\"card-subtitle mb-2 text-muted\">{{movie.created_at  | date: 'yyyy-MM-dd'}}</span>\r\n              <p class=\"card-text\">{{movie.description}}</p>\r\n            </div>\r\n          </div>\r\n        </div><!--.col-12-->\r\n\r\n      </div><!--.row-->\r\n    </div><!--.latest-->\r\n  </div><!--.container-->\r\n</div>\r\n<div *ngIf=\"!(movies$ | async)\">\r\n  <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n</div>\r\n\r\n\r\n<app-footer></app-footer>\r\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\nimport { Update } from '@ngrx/entity';\nimport { Store } from '@ngrx/store';\nimport { ToastrService } from 'ngx-toastr';\nimport { Observable } from 'rxjs';\nimport { ImageSnippet } from 'src/app/@theme/model/image-snippet';\nimport { ListCategories } from '../../model/list-categories.model';\nimport { MovieDetailsResponse } from '../../model/movie-details-response';\nimport { MovieDetails } from '../../model/movie-details.model';\nimport { MoviesService } from '../../services/movies.service';\nimport { loadCategories, loadMovie, updateMovie } from '../../store/movies.actions';\nimport { MoviesState } from '../../store/movies.reducer';\nimport { getListCategoiresSelector, getMovieDetailsSelector } from '../../store/movies.selector';\n\n@Component({\n  selector: 'app-edit-movie',\n  templateUrl: './edit-movie.component.html',\n  styleUrls: ['./edit-movie.component.scss']\n})\nexport class EditMovieComponent implements OnInit {\n  categories$: Observable<ListCategories[]>;\n  movieDetails: MovieDetails;\n  movieId: number;\n  isSubmited = false;\n  updateMovieForm: FormGroup;\n  uploadButtonValue = 'Upload';\n  coverUploadButtonValue = 'Upload';\n  imageName = 'Select Image';\n  fileSelected = false;\n  fileUploaded = false;\n  imageUrl: string;\n  imagePathReady = false;\n  submitButtonValue = 'Waiting Uploading Image';\n  selectedFile: ImageSnippet;\n\n  constructor(private store: Store<MoviesState>,\n              private formBuilder: FormBuilder,\n              private movieService: MoviesService,\n              private toaster: ToastrService,\n              private router: Router,\n              private activatedRoute: ActivatedRoute) {\n  }\n\n\n  ngOnInit(): void {\n    this.activatedRoute.paramMap.subscribe(\n      (params: ParamMap) => {\n        this.movieId = +params.get('id');\n        this.store.dispatch(loadMovie({id: this.movieId}));\n        this.store.dispatch(loadCategories());\n      });\n\n    this.updateMovieForm = new FormGroup({\n      id: new FormControl(''),\n      name: new FormControl('', Validators.required),\n      description: new FormControl('', Validators.required),\n      category_id: new FormControl('', Validators.required),\n      image: new FormControl('')\n    });\n    // dispatch categories\n    this.getMovieDetails();\n    // fetch all categories\n    this.getListCategories();\n  }\n\n  getMovieDetails() {\n    this.store.select(getMovieDetailsSelector).subscribe(\n      response => {\n        if (response) {\n          this.movieDetails = response;\n          this.fillMovieForm(response);\n        }\n      }\n    );\n  }\n\n  getListCategories() {\n    this.categories$ = this.store.select(getListCategoiresSelector);\n  }\n\n  fillMovieForm(data: MovieDetails) {\n    this.updateMovieForm = new FormGroup({\n      id: new FormControl(data.id),\n      name: new FormControl(data.name, Validators.required),\n      description: new FormControl(data.description, Validators.required),\n      category_id: new FormControl(data.category_id, Validators.required),\n      image: new FormControl('')\n    });\n  }\n\n\n  updateName(imageInput: any) {\n    const file: File = imageInput.files[0];\n    this.uploadButtonValue = 'upload';\n    this.imageName = file.name;\n    this.fileSelected = true;\n  }\n\n  processFile(imageInput: any) {\n    this.fileSelected = false;\n    this.uploadButtonValue = 'uploading...';\n    console.log('Processing File');\n    const file: File = imageInput.files[0];\n    const reader = new FileReader();\n\n    reader.addEventListener('load', (event: any) => {\n      this.selectedFile = new ImageSnippet(event.target.result, file);\n      this.movieService.uploadImage(this.selectedFile.file).subscribe(\n        (res) => {\n          console.log(res);\n          this.imageUrl = res;\n          this.uploadButtonValue = 'uploaded';\n          this.imagePathReady = true;\n          this.submitButtonValue = 'update-movie';\n        },\n        (err) => {\n          this.uploadButtonValue = 'upload';\n          this.fileSelected = true;\n          this.toaster.error('Network Error, Please Try After a Few Seconds');\n          console.log(err);\n        });\n    });\n    reader.readAsDataURL(file);\n  }\n\n  onSubmit() {\n    if (!this.updateMovieForm.valid) {\n      this.toaster.error('Form Not Valid !');\n      return;\n    }\n    const formObject = this.updateMovieForm.getRawValue();\n    if (this.imageUrl != '') {\n      formObject.image = this.imageUrl;\n    } else {\n      formObject.image = this.movieDetails.image;\n    }\n    const update: Update<MovieDetails> = {\n      id: this.movieId,\n      changes: formObject\n    };\n    this.store.dispatch(updateMovie({data: update}));\n  }\n\n\n\n}\n","<div *ngIf=\"movieDetails != null && (categories$ | async) as categories\">\n    <!-- general form elements -->\n    <div class=\"container-fluid\">\n        <div class=\"content-header\">\n            <h1 class=\"text-center my-5\">Update Movie Page</h1>\n        </div>\n        <div class=\"card card-info\">\n            <div class=\"card-header bg-sidebar-item-button text-white\">\n                <h3 class=\"card-title mb-0\">Update Movie</h3>\n            </div>\n            <!-- /.card-header -->\n            <!-- form start -->\n            <form [formGroup]=\"updateMovieForm\" (ngSubmit)=\"onSubmit()\">\n                <div class=\"card-body\">\n                    <div class=\"form-group\">\n                    <label for=\"exampleInputname1\">name</label>\n                    <input type=\"text\"\n                            [ngClass]=\"{'is-invalid': updateMovieForm.get('name').errors &&\n                                    (updateMovieForm.get('name').touched || updateMovieForm.get('name').dirty)}\"\n                            name=\"name\"\n                            formControlName=\"name\"\n                            id=\"exampleInputname1\"\n                            class=\"form-control\"\n                            placeholder=\"Name\">\n                    <span class=\"invalid-feedback\" *ngIf=\"updateMovieForm.get('name').errors?.required\">Name</span>\n                    </div>\n                    <div class=\"form-group\">\n                    <label for=\"exampleInputdescription\">Description</label>\n                    <div class=\"position-relative\">\n                    <input #descriptionField type=\"description\"\n                            [ngClass]=\"{'is-invalid': updateMovieForm.get('description').errors &&\n                                    (updateMovieForm.get('description').touched || updateMovieForm.get('description').dirty)}\"\n                            name=\"description\"\n                            formControlName=\"description\"\n                            id=\"exampleInputdescription\"\n                            class=\"form-control\"\n                            placeholder=\"Movie Description\">\n                    </div>\n                    <span class=\"invalid-feedback\" *ngIf=\"updateMovieForm.get('description').errors?.required\">Description is required</span>\n                    </div>\n                    <div class=\"form-group\">\n                    <label for=\"exampleInputEmail\">Category</label>\n                    <select name=\"category_id\"\n                            class=\"form-control\"\n                            formControlName=\"category_id\"\n                            id=\"exampleInputcategory_id\"\n                            [ngClass]=\"{'is-invalid': updateMovieForm.get('category_id').errors &&\n                            (updateMovieForm.get('category_id').touched || updateMovieForm.get('category_id').dirty)}\">\n                        <option *ngFor=\"let category of categories\" value=\"{{category.id}}\">{{category.name}}</option>\n                    </select>      \n                    <span class=\"invalid-feedback\" *ngIf=\"updateMovieForm.get('category_id').errors?.required\">Category field is required</span>\n                    </div>\n                    <div class=\"form-group\">\n                    <label for=\"exampleInputupload\">upload</label>\n                    <div class=\"input-group input-group-custom\">\n                        <div class=\"custom-file\">\n                        <input #imageInput type=\"file\" accept=\"image/*\" class=\"custom-file-input\" id=\"file-input\"\n                                (change)=\"updateName(imageInput)\">\n                        <label class=\"custom-file-label\" for=\"file-input\">{{imageName}}</label>\n                        </div>\n                        <div class=\"input-group-append\">\n                        <button class=\"btn btn-success\" type=\"button\" (click)=\"processFile(imageInput)\" [disabled]=!fileSelected>\n                            {{uploadButtonValue}}\n                        </button>\n                        </div>\n                    </div>\n                    </div>\n                </div>\n                <!-- /.card-body -->\n\n                <div class=\"card-footer\">\n                    <button type=\"submit\" class=\"btn bg-sidebar-item-button text-white\" [disabled]=\"updateMovieForm.invalid || isSubmited\">Submit</button>\n                </div>\n            </form>\n        </div>\n        <!-- /.card -->\n    </div>\n</div>\n\n<div *ngIf=\"movieDetails == null && !(categories$ | async)\">\n    <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n</div>","import {Component, Inject, OnInit, Renderer2} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {Store} from '@ngrx/store';\nimport {ToastrService} from 'ngx-toastr';\nimport {ImageSnippet} from '../../../../@theme/model/image-snippet';\nimport {DOCUMENT} from '@angular/common';\nimport { MoviesService } from '../../services/movies.service';\nimport { MoviesState } from '../../store/movies.reducer';\nimport { addMovie, loadCategories } from '../../store/movies.actions';\nimport { getListCategoiresSelector } from '../../store/movies.selector';\nimport { ListCategories } from '../../model/list-categories.model';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-new-movie',\n  templateUrl: './new-movie.component.html',\n  styleUrls: ['./new-movie.component.scss']\n})\nexport class NewMovieComponent implements OnInit {\n  categories$: Observable<ListCategories[]>;\n  addMovieForm: FormGroup;\n  uploadButtonValue = 'upload';\n  imageName = 'select-image';\n  fileSelected = false;\n  imageUrl: string;\n  imagePathReady = false;\n  submitButtonValue = 'waiting-uploading-image';\n  selectedFile: ImageSnippet;\n\n  constructor(private store: Store<MoviesState>,\n              private movieService: MoviesService,\n              private toaster: ToastrService) { }\n\n  ngOnInit(): void {\n    // dispatch categories\n    this.store.dispatch(loadCategories());\n    // init form fields\n    this.addMovieForm = new FormGroup({\n      name: new FormControl('', Validators.required),\n      description: new FormControl('', Validators.required),\n      category_id: new FormControl('', Validators.required),\n      image: new FormControl('')\n    });\n    // fetch all categories\n    this.getListCategories();\n  }\n\n    \n  getListCategories() {\n    this.categories$ = this.store.select(getListCategoiresSelector);\n  }\n\n\n  updateName(imageInput: any) {\n    const file: File = imageInput.files[0];\n    this.uploadButtonValue = 'upload';\n    this.imageName = file.name;\n    this.fileSelected = true;\n  }\n\n  processFile(imageInput: any) {\n    this.fileSelected = false;\n    this.uploadButtonValue = 'uploading...';\n    console.log('Processing File');\n    const file: File = imageInput.files[0];\n    const reader = new FileReader();\n\n    reader.addEventListener('load', (event: any) => {\n      this.selectedFile = new ImageSnippet(event.target.result, file);\n      this.movieService.uploadImage(this.selectedFile.file).subscribe(\n        (res) => {\n          console.log(res);\n          this.imageUrl = res;\n          this.uploadButtonValue = 'uploaded';\n          this.imagePathReady = true;\n          this.submitButtonValue = 'new-movie';\n        },\n        (err) => {\n          this.uploadButtonValue = 'upload';\n          this.fileSelected = true;\n          this.toaster.error('Network Error, Please Try After a Few Seconds');\n          console.log(err);\n        });\n    });\n    reader.readAsDataURL(file);\n  }\n\n  onSubmit() {\n    if (!this.addMovieForm.valid) {\n      this.toaster.error('Form Not Valid !');\n      return;\n    }\n    const formObject = this.addMovieForm.getRawValue();\n    formObject.image = this.imageUrl;\n    this.store.dispatch(addMovie({data: formObject}));\n  }\n\n}\n","<div *ngIf=\"(categories$ | async) as categories\">\n  <!-- general form elements -->\n  <div class=\"container-fluid\">\n    <div class=\"content-header\">\n      <h1 class=\"text-center mt-5 mb-3\">New Movie Page</h1>\n    </div>\n    <div class=\"card card-info mb-5\">\n      <div class=\"card-header bg-light-blue text-white p-3\">\n        <!-- <h3 class=\"card-title mb-0\">{{'new-event' | translate}}</h3> -->\n      </div>\n      <!-- /.card-header -->\n      <!-- form start -->\n      <form [formGroup]=\"addMovieForm\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"card-body\">\n          <div class=\"form-group\">\n            <label for=\"exampleInputname1\">name</label>\n            <input type=\"text\"\n                  [ngClass]=\"{'is-invalid': addMovieForm.get('name').errors &&\n                            (addMovieForm.get('name').touched || addMovieForm.get('name').dirty)}\"\n                  name=\"name\"\n                  formControlName=\"name\"\n                  id=\"exampleInputname1\"\n                  class=\"form-control\"\n                  placeholder=\"Name\">\n            <span class=\"invalid-feedback\" *ngIf=\"addMovieForm.get('name').errors?.required\">Name</span>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"exampleInputdescription\">Description</label>\n            <div class=\"position-relative\">\n            <input #descriptionField type=\"description\"\n                  [ngClass]=\"{'is-invalid': addMovieForm.get('description').errors &&\n                            (addMovieForm.get('description').touched || addMovieForm.get('description').dirty)}\"\n                  name=\"description\"\n                  formControlName=\"description\"\n                  id=\"exampleInputdescription\"\n                  class=\"form-control\"\n                  placeholder=\"Movie Description\">\n            </div>\n            <span class=\"invalid-feedback\" *ngIf=\"addMovieForm.get('description').errors?.required\">Description is required</span>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"exampleInputEmail\">Category</label>\n            <select name=\"category_id\"\n                    class=\"form-control\"\n                    formControlName=\"category_id\"\n                    id=\"exampleInputcategory_id\"\n                    [ngClass]=\"{'is-invalid': addMovieForm.get('category_id').errors &&\n                    (addMovieForm.get('category_id').touched || addMovieForm.get('category_id').dirty)}\">\n              <option *ngFor=\"let category of categories\" value=\"{{category.id}}\">{{category.name}}</option>\n            </select>      \n            <span class=\"invalid-feedback\" *ngIf=\"addMovieForm.get('category_id').errors?.required\">Category field is required</span>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"exampleInputupload\">upload</label>\n            <div class=\"input-group input-group-custom\">\n              <div class=\"custom-file\">\n                <input #imageInput type=\"file\" accept=\"image/*\" class=\"custom-file-input\" id=\"file-input\"\n                      (change)=\"updateName(imageInput)\">\n                <label class=\"custom-file-label\" for=\"file-input\">{{imageName}}</label>\n              </div>\n              <div class=\"input-group-append\">\n                <button class=\"btn btn-success\" type=\"button\" (click)=\"processFile(imageInput)\" [disabled]=!fileSelected>\n                  {{uploadButtonValue}}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <!-- /.card-body -->\n\n        <div class=\"card-footer\">\n          <button type=\"submit\" class=\"btn bg-light-blue text-white\" [disabled]=\"addMovieForm.invalid\">create</button>\n        </div>\n      </form>\n    </div>\n    <!-- /.card -->\n  </div>\n</div>\n<div *ngIf=\"!(categories$ | async)\">\n  <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n</div>","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport {forkJoin, Observable, Subscription} from 'rxjs';\nimport { FooterComponent } from 'src/app/@theme/components';\nimport { AppState } from 'src/app/@theme/store/app-state';\nimport { setLoadSpinner } from 'src/app/@theme/store/shared/shared.actions';\nimport {MoviesService} from './services/movies.service';\nimport {MoviesState} from './store/movies.reducer';\nimport {loadMovies} from './store/movies.actions';\nimport {getListCategoiresSelector, getListMoviesSelector} from './store/movies.selector';\nimport {ListMovies} from './model/list-movies.model';\nimport { AdminConfig } from '../AdminConfig';\nimport { ListCategories } from './model/list-categories.model';\n\n\n@Component({\n  selector: 'app-list-movies',\n  templateUrl: './list-movies.component.html',\n  styleUrls: ['./list-movies.component.scss'],\n  providers: [ FooterComponent ]\n})\nexport class ListMoviesComponent implements OnInit {\n  movies$: Observable<ListMovies[]>;\n  baseUrl = AdminConfig.sourceAPI;\n\n  constructor(private store: Store<MoviesState>) {\n  }\n\n  ngOnInit() {\n    this.store.dispatch(loadMovies());\n    this.getListMovies();\n  }\n\n  getListMovies() {\n    this.movies$ = this.store.select(getListMoviesSelector);\n  }\n\n}\n","<div class=\"w-100 mb-4\" *ngIf=\"(movies$ | async) as movies\">\n  <div class=\"container\">\n    <h1 class=\"text-center my-4\">All Movies</h1>\n    <!--Start Latest Section-->\n    <div class=\"latest mt-5\">\n      <div class=\"row\">\n\n        <div class=\"col-12 col-sm-6 col-md-4 col-lg-3\" *ngFor=\"let movie of movies\">\n          <div class=\"card w-100 mb-4\" style=\"width: 18rem;\">\n            <img class=\"card-img-top\" src=\"{{baseUrl + movie.image}}\" alt=\"Card image cap\">\n            <div class=\"card-body\">\n              <h5 class=\"card-title\">{{movie.name}}</h5>\n              <span class=\"card-subtitle mb-2 text-muted\">{{movie.created_at  | date: 'yyyy-MM-dd'}}</span>\n              <p class=\"card-text\">{{movie.description}}</p>\n            </div>\n          </div>\n        </div><!--.col-12-->\n\n      </div><!--.row-->\n    </div><!--.latest-->\n  </div><!--.container-->\n</div>\n<div *ngIf=\"!(movies$ | async)\">\n  <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n</div>\n\n\n<app-footer></app-footer>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AllCategoriesComponent } from './components/all-categories/all-categories.component';\nimport { AllMoviesComponent } from './components/all-movies/all-movies.component';\nimport { CategoryMoviesComponent } from './components/category-movies/category-movies.component';\nimport { EditMovieComponent } from './components/edit-movie/edit-movie.component';\nimport { NewMovieComponent } from './components/new-movie/new-movie.component';\nimport { ListMoviesComponent } from './list-movies.component';\n\n\nconst routes: Routes = [\n  { path: '', component: ListMoviesComponent },\n  { path: 'all', component: AllMoviesComponent },\n  { path: 'add', component: NewMovieComponent },\n  { path: 'edit/:id', component: EditMovieComponent },\n  { path: 'categories', component: AllCategoriesComponent },\n  { path: 'categories/:id', component: CategoryMoviesComponent },\n  { path: 'dashboard', redirectTo: '', pathMatch: 'full'}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class MoviesRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { ThemeModule } from 'src/app/@theme/theme.module';\n\nimport { MoviesRoutingModule } from './movies-routing.module';\nimport { StoreModule } from '@ngrx/store';\nimport * as fromListMovies from './store/movies.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { ListMoviesComponent } from './list-movies.component';\nimport { NewMovieComponent } from './components/new-movie/new-movie.component';\nimport { AllMoviesComponent } from './components/all-movies/all-movies.component';\nimport { MoviesEffects } from './store/movies.effects';\nimport { EditMovieComponent } from './components/edit-movie/edit-movie.component';\nimport { AllCategoriesComponent } from './components/all-categories/all-categories.component';\nimport { CategoryMoviesComponent } from './components/category-movies/category-movies.component';\n\n@NgModule({\n  declarations: [\n    AllMoviesComponent,\n    ListMoviesComponent,\n    NewMovieComponent,\n    EditMovieComponent,\n    AllCategoriesComponent,\n    CategoryMoviesComponent\n  ],\n  imports: [\n    ThemeModule,\n    MoviesRoutingModule,\n    StoreModule.forFeature(fromListMovies.moviesFeatureKey, fromListMovies.reducer),\n    EffectsModule.forFeature([MoviesEffects])\n  ]\n})\nexport class MoviesModule { }\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {AdminConfig} from '../../AdminConfig';\nimport {ListMoviesResponse} from '../model/list-movies-response';\nimport { ListMovies } from '../model/list-movies.model';\nimport { MovieDetails } from '../model/movie-details.model';\nimport { MovieDetailsResponse } from '../model/movie-details-response';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MoviesService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  getListMovies(): Observable<ListMoviesResponse> {\n    return this.httpClient.get<ListMoviesResponse>(AdminConfig.moviesAPI);\n  }\n\n  getMoviesCategories(): Observable<any> {\n    return this.httpClient.get<any>(AdminConfig.moviesCategoriesAPI);\n  }\n\n  getMoviesByCategoryId(categoryId: number): Observable<ListMoviesResponse> {\n    return this.httpClient.get<ListMoviesResponse>(`${AdminConfig.categoryMoviesAPI}/${categoryId}`);\n  }\n\n  getMovieDetails(movieId: number): Observable<MovieDetailsResponse> {\n    return this.httpClient.get<MovieDetailsResponse>(`${AdminConfig.moviesAPI}/${movieId}`);\n  }\n\n  newMovie(data): Observable<ListMovies> {\n    return this.httpClient.post<ListMovies>(AdminConfig.moviesAPI, data);\n  }\n  \n  updateMovie(movieId: number, data: any): Observable<any> {\n    return this.httpClient.put(\n      `${AdminConfig.moviesAPI}/${movieId}`,\n      JSON.stringify(data)\n    );\n  }\n\n  deleteMovie(id: number): Observable<any> {\n    return this.httpClient.delete(\n      `${AdminConfig.moviesAPI}/${id}`\n    );\n  }\n\n  //Upload Image\n  public uploadImage(image: File): Observable<string> {\n    const formData = new FormData();\n    formData.append('image', image);\n    return this.httpClient.post<string>(AdminConfig.generalUploadAPI, formData);\n  }\n}\n","import { createAction, props } from '@ngrx/store';\nimport { Update } from '@ngrx/entity';\n\nimport { ListMovies } from '../model/list-movies.model';\nimport { MovieDetails } from '../model/movie-details.model';\n\nexport const loadMovies = createAction(\n  '[Movies/API] Load Movies'\n);\n\nexport const loadMoviesSuccess = createAction(\n  '[Movies/API] Load Movies Success',\n  props<{ message: ListMovies[] }>()\n);\n\nexport const loadMoviesFailure = createAction(\n  '[Movies/API] Load Movies Failure',\n  props<{ error: string }>()\n);\n\nexport const loadMovie = createAction(\n  '[Movies/API] Load Movie',\n  props<{ id: number }>()\n);\n\nexport const loadMovieSuccess = createAction(\n  '[Movies/API] Load Movie Success',\n  props<{ message: MovieDetails }>()\n);\n\nexport const loadMovieFailure = createAction(\n  '[Movies/API] Load Movie Failure',\n  props<{ error: string }>()\n);\n\nexport const addMovie = createAction(\n  '[Movies/API] Add Movie',\n  props<{ data: ListMovies }>()\n);\n\nexport const addMovieSuccess = createAction(\n  '[Movies/API] Add Movie Success'\n);\n\nexport const addMovieFailure = createAction(\n  '[Movies/API] Add Movie Failure',\n  props<{ error: string }>()\n);\n\nexport const loadCategories = createAction(\n  '[Movies/API] Load Categories'\n);\n\nexport const loadCategoriesSuccess = createAction(\n  '[Movies/API] Load Categories Success',\n  props<{ message: any }>()\n);\n\nexport const loadCategoriesFailure = createAction(\n  '[Movies/API] Load Categories Failure',\n  props<{ error: string }>()\n);\n\nexport const loadMovieByCategoryId = createAction(\n  '[Movies/API] Load Movies By Category Id',\n  props<{ id: number }>()\n\n);\n\nexport const loadMovieByCategoryIdSuccess = createAction(\n  '[Movies/API] Load Movies By Category Id Success',\n  props<{ message: ListMovies[] }>()\n);\n\nexport const loadMovieByCategoryIdFailure = createAction(\n  '[Movies/API] Load Movies By Category Id Failure',\n  props<{ error: string }>()\n);\n\nexport const updateMovie = createAction(\n  '[Movies/API] Update Movie',\n  props<{ data: Update<ListMovies> }>()\n);\n\nexport const updateMovieSuccess = createAction(\n  '[Movies/API] Update Movie Success'\n);\n\nexport const updateMovieFailure = createAction(\n  '[Movies/API] Update Movie Failure',\n  props<{ error: string }>()\n);\n\nexport const deleteMovie = createAction(\n  '[Movies/API] Delete Movie',\n  props<{ id: number }>()\n);\n\nexport const deleteMovieSuccess = createAction(\n  '[Movies/API] Delete Movie Success',\n  props<{ id: number }>()\n);\n\nexport const deleteMovieFailure = createAction(\n  '[Movies/API] Delete Movie Failure',\n  props<{ error: string }>()\n);\n\n","import { Injectable } from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport * as moviesActions from './movies.actions';\nimport {catchError, concatMap, exhaustMap, map, mergeMap, switchMap, tap} from 'rxjs/operators';\nimport {of} from 'rxjs';\nimport { MoviesService } from '../services/movies.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { MoviesState } from './movies.reducer';\nimport { ToastrService } from 'ngx-toastr';\n\n\n\n@Injectable()\nexport class MoviesEffects {\n\n  constructor(private actions$: Actions,\n              private store: Store<MoviesState>,\n              private router: Router,\n              private toasterService: ToastrService,\n              private activatedRouter: ActivatedRoute,\n              private moviesService: MoviesService) {}\n\n  loadListMoviesEffect$ = createEffect(() => this.actions$.pipe(\n    ofType(moviesActions.loadMovies),\n    switchMap(() => this.moviesService.getListMovies()\n      .pipe(\n        map(response => moviesActions.loadMoviesSuccess({message: response.message})),\n        catchError(error => of(moviesActions.loadMoviesFailure({error})))\n      ))\n  ));\n\n  loadListCategoriesEffect$ = createEffect(() => this.actions$.pipe(\n    ofType(moviesActions.loadCategories),\n    switchMap(() => this.moviesService.getMoviesCategories()\n      .pipe(\n        map(response => moviesActions.loadCategoriesSuccess({message: response.message})),\n        catchError(error => of(moviesActions.loadCategoriesFailure({error})))\n      ))\n  ));\n\n  loadCategoryMovies$ = createEffect(() => this.actions$.pipe(\n    ofType(moviesActions.loadMovieByCategoryId),\n    switchMap(action => this.moviesService.getMoviesByCategoryId(+action.id)\n      .pipe(\n        map(response => {\n          return moviesActions.loadMovieByCategoryIdSuccess({message: response.message});\n        }),\n        catchError(error => of(moviesActions.loadMovieByCategoryIdFailure(error)))\n      ))\n  ));\n\n  loadMovie$ = createEffect(() => this.actions$.pipe(\n    ofType(moviesActions.loadMovie),\n    switchMap(action => this.moviesService.getMovieDetails(+action.id)\n      .pipe(\n        map(response => {\n          return moviesActions.loadMovieSuccess({message: response.message});\n        }),\n        catchError(error => of(moviesActions.loadMovieFailure(error)))\n      ))\n  ));\n\n  newMovieEffect$ = createEffect(() => this.actions$.pipe(\n    ofType(moviesActions.addMovie),\n    exhaustMap(action => this.moviesService.newMovie(+action.data)\n      .pipe(\n        map(response => {\n          this.toasterService.success('Your Movie Successfully Created');\n          return moviesActions.addMovieSuccess()\n        }),\n        catchError(error => of(moviesActions.addMovieFailure({error})))\n      ))\n  ));\n\n  redirectNewMovieEffect$ = createEffect(() => this.actions$.pipe(\n    ofType(moviesActions.addMovieSuccess),\n    tap(res => this.router.navigate(['../'], {relativeTo: this.activatedRouter}))\n  ), { dispatch: false });\n  \n  \n  deleteMovie$ = createEffect(() => this.actions$.pipe(\n    ofType(moviesActions.deleteMovie),\n    mergeMap(action => this.moviesService.deleteMovie(action.id)\n    .pipe(\n      map(response => {\n        this.toasterService.success('Your Movie Successfully Deleted');\n        this.store.dispatch(moviesActions.loadMovies());\n        return moviesActions.deleteMovieSuccess({ id: action.id });\n      }),\n      catchError(error => of(moviesActions.deleteMovieFailure({error})))\n    ))\n  ));\n\n  updateMovie$ = createEffect(() => this.actions$.pipe(\n    ofType(moviesActions.updateMovie),\n    concatMap(action => this.moviesService.updateMovie(\n        +action.data.id,\n        action.data.changes\n      )\n    ),\n    tap(res => {\n      this.toasterService.success('Your Movie Successfully Updated');\n      return this.router.navigate(['/all']);\n    })\n    ), { dispatch: false }   // We Must Use Dispatch To False To Work Correctly\n  );\n}\n","import { Action, createReducer, on } from '@ngrx/store';\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { ListMovies } from '../model/list-movies.model';\nimport * as moviesActions from './movies.actions';\nimport { ListCategories } from '../model/list-categories.model';\nimport { MovieDetails } from '../model/movie-details.model';\n\nexport const moviesFeatureKey = 'movies';\n\nexport interface MoviesState extends EntityState<ListMovies> {\n  // additional entities state properties\n  message: ListMovies[];\n  categoryMovies: ListMovies[];\n  categories: ListCategories[];\n  movieDetails: MovieDetails;\n  error: string;\n}\n\nexport const adapter: EntityAdapter<ListMovies> = createEntityAdapter<ListMovies>();\n\nexport const initialState: MoviesState = adapter.getInitialState({\n  // additional entity state properties\n  message: undefined,\n  categoryMovies: undefined,\n  categories: undefined,\n  movieDetails: undefined,\n  error: undefined\n});\n\n\nexport const reducer = createReducer(\n  initialState,\n  on(moviesActions.loadMoviesSuccess,\n    (state, action) => {\n      return {\n        ...state,\n        message: action.message\n      };\n    }\n  ),\n  on(moviesActions.loadMovieSuccess,\n    (state, action) => {\n      return {\n        ...state,\n        movieDetails: action.message\n      };\n    }\n  ),\n  on(moviesActions.loadCategoriesSuccess,\n    (state, action) => {\n      return {\n        ...state,\n        categories: action.message\n      }\n  }),\n  on(moviesActions.loadMovieByCategoryIdSuccess,\n    (state, action) => {\n      return {\n        ...state,\n        categoryMovies: action.message\n      };\n    }\n  ),\n  on(moviesActions.addMovie,\n    (state, action) => adapter.addOne(action.data, state)),\n  on(moviesActions.addMovieFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(moviesActions.deleteMovieSuccess,\n    (state, action) => adapter.removeOne(action.id, state)\n  ),\n  on(moviesActions.deleteMovieFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      }\n  }),\n  on(moviesActions.updateMovie,\n    (state, action) => adapter.updateOne(action.data, state)\n  ),\n);\n\n\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal,\n} = adapter.getSelectors();\n","import {createFeatureSelector, createSelector} from '@ngrx/store';\r\nimport {MoviesState, moviesFeatureKey, selectAll} from './movies.reducer';\r\n\r\nconst listMoviesFeatureState = createFeatureSelector(moviesFeatureKey);\r\n\r\nexport const getListMoviesSelector = createSelector(listMoviesFeatureState, (state: MoviesState) => state.message);\r\n\r\nexport const getListCategoiresSelector = createSelector(listMoviesFeatureState, (state: MoviesState) => state.categories);\r\n\r\nexport const getMoviesByCategoryIdSelector = createSelector(listMoviesFeatureState, (state: MoviesState) => state.categoryMovies);\r\n\r\nexport const getMovieDetailsSelector = createSelector(listMoviesFeatureState, (state: MoviesState) => state.movieDetails);\r\n\r\nexport const getListMoviesErrorSelector = createSelector(listMoviesFeatureState, (state: MoviesState) => state.error);\r\n"]}